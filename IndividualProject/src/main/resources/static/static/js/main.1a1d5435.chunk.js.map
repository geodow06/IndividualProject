{"version":3,"sources":["NavBar.js","Cube.js","UserGet.js","AddUser.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","href","Component","AddUser","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pushRequest","axios","post","concat","state","username","password","setStates","event","setState","defineProperty","target","name","value","handleSubmit","console","log","preventDefault","onSubmit","type","onChange","id","placeholder","onClick","App","src_NavBar","src_AddUser","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAmBeA,yLAdX,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,YAAYD,UAAU,QAA9B,wBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASC,KAAK,SAA3B,QACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,iBACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,WACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,kBATWC,iBCCFA,8BCCGA,mBC6CLC,cA5Cf,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASNQ,YAAc,WACZC,IAAMC,KAAN,YAAAC,OAAuBV,EAAKW,MAAMC,SAAlC,KAAAF,OAA8CV,EAAKW,MAAME,YAX3Cb,EAehBc,UAAY,SAACC,GACXf,EAAKgB,SAALf,OAAAgB,EAAA,EAAAhB,CAAA,GAAgBc,EAAMG,OAAOC,KAAMJ,EAAMG,OAAOE,SAhBlCpB,EAmBhBqB,aAAa,SAACN,GACZO,QAAQC,IAAI,6BAA+BvB,EAAKW,MAAMC,UACtDU,QAAQC,IAAI,6BAA8BvB,EAAKW,MAAME,UACrDE,EAAMS,kBApBRxB,EAAKW,MAAQ,CACXC,SAAS,GACTC,SAAS,IAJKb,wEA0Bd,OACER,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAM+B,SAAUtB,KAAKkB,aAAc1B,UAAU,eACzCH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAjB,eAEAH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,OAAOP,KAAK,WAAWD,OAAO,MAAMvB,UAAU,yBAAyBgC,SAAUxB,KAAKW,UAAWF,SAAUT,KAAKQ,MAAMC,SAAUgB,GAAG,WAAWC,YAAY,eACtKrC,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,OAAOP,KAAK,WAAWD,OAAO,MAAMvB,UAAU,yBAAyBgC,SAAUxB,KAAKW,UAAWD,SAAUV,KAAKQ,MAAME,SAAUe,GAAG,WAAWC,YAAY,gBAGxKrC,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,SAASN,MAAM,SAASU,QAAS3B,KAAKI,uBArC5CV,aCmBPkC,mLAZX,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAD,MAGAxC,EAAAC,EAAAC,cAACuC,EAAD,cAVUpC,aCKEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a1d5435.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css'; \r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n    <div className=\"header\">\r\n      <a href=\"worm.html\" className=\"logo\">George's PLL Trainer</a>\r\n      <div className=\"header-right\">\r\n          <a className=\"active\" href=\"#home\">Home</a> \r\n          <a href=\"\">ebverjbgwerhi</a>\r\n          <a href=\"\">Contact</a>\r\n          <a href=\"\">About</a> \r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport './App.css'; \r\n// import '/roofpig_and_three.min.js'\r\n\r\nclass Cube extends Component {\r\n    render() {\r\n      return (\r\n    \r\n        <div class=\"roofpig\"  data-config=\"alg=U\"></div>\r\n      \r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Cube;","import React, { Component } from 'react';\r\nimport './App.css'; \r\n// import '/roofpig_and_three.min.js'\r\nimport axios from 'axios';\r\n\r\nclass UserGet extends Component { \r\n  constructor(){ \r\n    super(); \r\n    this.state = { \r\n      data: \"hello\", \r\n      username:\"null\", \r\n      password:\"null\"\r\n    }\r\n  }\r\n\r\n\r\n\r\n    getRequest = ()=>{ \r\n        axios.get('/getAllUsers').then(r=>{this.setState({data: r.data})}); \r\n        \r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n            <button onClick={this.getRequest}>Click</button> \r\n            <p>username={this.state.data[0].userName}</p> \r\n            <p>password={this.state.data[0].userPassword}</p> \r\n        </div>\r\n      \r\n      );\r\n    }\r\n  }\r\n  \r\n  export default UserGet;","import React, { Component } from 'react';\r\nimport './App.css'; \r\n// import '/roofpig_and_three.min.js'\r\nimport axios from 'axios';\r\n\r\nclass AddUser extends Component { \r\n  constructor(props){ \r\n    super(props); \r\n    this.state = { \r\n      username:'', \r\n      password:''\r\n    }\r\n  }\r\n\r\n\r\n\r\n    pushRequest = ()=>{ \r\n      axios.post(`/addUser/${this.state.username}/${this.state.password}`); \r\n      \r\n    } \r\n\r\n    setStates = (event)=>{ \r\n      this.setState({[event.target.name]:event.target.value});\r\n    } \r\n\r\n    handleSubmit=(event) =>{ \r\n      console.log('A username was submitted: ' + this.state.username); \r\n      console.log('A password was submitted: '+ this.state.password);\r\n      event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div> \r\n            <form onSubmit={this.handleSubmit} className=\"form-inline\">\r\n                <label className=\"required\">* required </label>\r\n                \r\n                <label>\r\n                  <input type=\"text\" name='username' target='one' className=\"form-control inputArea\" onChange={this.setStates} username={this.state.username} id=\"Username\" placeholder=\"Username *\"></input> \r\n                  <input type=\"text\" name='password' target='two' className=\"form-control inputArea\" onChange={this.setStates} password={this.state.password} id=\"Password\" placeholder=\"Password *\"></input> \r\n                </label> \r\n                \r\n                <input type=\"submit\" value=\"Submit\" onClick={this.pushRequest}/> \r\n                \r\n            </form> \r\n        </div>\r\n      );\r\n    } \r\n  }\r\n  \r\n  export default AddUser;","import React, { Component } from 'react';\r\nimport './App.css'; \r\nimport NavBar from './NavBar.js';\r\nimport Cube from './Cube.js'; \r\nimport axios from 'axios';\r\nimport UserGet from './UserGet'; \r\nimport AddUser from './AddUser';\r\nclass App extends Component { \r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar/> \r\n        {/* <Cube/> */}  \r\n        {/* <UserGet/>  */}\r\n        <AddUser/>\r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}