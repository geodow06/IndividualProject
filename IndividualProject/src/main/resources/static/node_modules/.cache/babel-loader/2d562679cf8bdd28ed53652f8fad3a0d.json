{"ast":null,"code":"'use strict';\n\nvar parseMs = require('parse-ms');\n\nvar pluralize = function pluralize(word, count) {\n  return count === 1 ? word : word + 's';\n};\n\nmodule.exports = function (ms) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!Number.isFinite(ms)) {\n    throw new TypeError('Expected a finite number');\n  }\n\n  if (options.compact) {\n    options.secDecimalDigits = 0;\n    options.msDecimalDigits = 0;\n  }\n\n  var ret = [];\n\n  var add = function add(value, long, short, valueString) {\n    if (value === 0) {\n      return;\n    }\n\n    var postfix = options.verbose ? ' ' + pluralize(long, value) : short;\n    ret.push((valueString || value) + postfix);\n  };\n\n  var secDecimalDigits = typeof options.secDecimalDigits === 'number' ? options.secDecimalDigits : 1;\n\n  if (secDecimalDigits < 1) {\n    var diff = 1000 - ms % 1000;\n\n    if (diff < 500) {\n      ms += diff;\n    }\n  }\n\n  var parsed = parseMs(ms);\n  add(Math.trunc(parsed.days / 365), 'year', 'y');\n  add(parsed.days % 365, 'day', 'd');\n  add(parsed.hours, 'hour', 'h');\n  add(parsed.minutes, 'minute', 'm');\n\n  if (options.separateMs || options.formatSubMs || ms < 1000) {\n    add(parsed.seconds, 'second', 's');\n\n    if (options.formatSubMs) {\n      add(parsed.milliseconds, 'millisecond', 'ms');\n      add(parsed.microseconds, 'microsecond', 'Âµs');\n      add(parsed.nanoseconds, 'nanosecond', 'ns');\n    } else {\n      var msAndBelow = parsed.milliseconds + parsed.microseconds / 1000 + parsed.nanoseconds / 1e6;\n      var msDecimalDigits = typeof options.msDecimalDigits === 'number' ? options.msDecimalDigits : 0;\n      var msStr = msDecimalDigits ? msAndBelow.toFixed(msDecimalDigits) : Math.ceil(msAndBelow);\n      add(parseFloat(msStr, 10), 'millisecond', 'ms', msStr);\n    }\n  } else {\n    var sec = ms / 1000 % 60;\n\n    var _secDecimalDigits = typeof options.secDecimalDigits === 'number' ? options.secDecimalDigits : 1;\n\n    var secFixed = sec.toFixed(_secDecimalDigits);\n    var secStr = options.keepDecimalsOnWholeSeconds ? secFixed : secFixed.replace(/\\.0+$/, '');\n    add(parseFloat(secStr, 10), 'second', 's', secStr);\n  }\n\n  if (ret.length === 0) {\n    return '0' + (options.verbose ? ' milliseconds' : 'ms');\n  }\n\n  if (options.compact) {\n    return '~' + ret[0];\n  }\n\n  if (typeof options.unitCount === 'number') {\n    return '~' + ret.slice(0, Math.max(options.unitCount, 1)).join(' ');\n  }\n\n  return ret.join(' ');\n};","map":null,"metadata":{},"sourceType":"script"}